import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import {getEcuState, updateRocket, getGseState} from "../webservice";

const initialState = {
    solenoids: {},
    pts: {},
    tcs: {},
    igniters: {},
    misc: {},
    keydown: null
};

function parseState(state, dispatch) {
    let solenoids = {};
    let pts = {};
    let tcs = {};
    let igniters = {};
    let misc = {};
    for (const key in state) {
        if (key.includes("solenoid")) {
            let solenoidType = key.includes("Expected") ? "expected" : "current";
            let solenoidName = key.includes("Expected") ? key.split("Expected")[1] : key.split("Current")[1];
            if (!Object.keys(solenoids).includes(solenoidName)) {
                solenoids[solenoidName] = {expected: 0, current: 0};
            }
            solenoids[solenoidName][solenoidType] = state[key];
        } else if (key.includes("temperature")) {
            let key_name = key.substring(11, key.length);
            tcs[key_name] = state[key];
        } else if (key.includes("pressure")) {
            let key_name = key.substring(8, key.length);
            pts[key_name] = state[key];
        } else if (key.includes("igniter")) {
            if (key.includes("Armed")) {
                igniters.armed = state[key];
            } else {
                let igniterType = key.includes("Expected") ? "expected" : "current";
                let igniterName = key.includes("Expected") ? key.split("Expected")[1] : key.split("Current")[1];
                if (!Object.keys(igniters).includes(igniterName)) {
                    igniters[igniterName] = {expected: 0, current: 0};
                }
                igniters[igniterName][igniterType] = state[key];
            }
        } else {
            misc[key] = state[key];
        }
    }
    dispatch(setPts(pts));
    dispatch(setSolenoids(solenoids));
    dispatch(setTcs(tcs));
    dispatch(setIgniters(igniters));
    dispatch(setMisc(misc));
}

export const fetchRocketState = createAsyncThunk("rocket/fetchRocketState", async (_, {dispatch}) => {
    try {
        const ecuState = (await getEcuState()).data;
        parseState(ecuState, dispatch);
        const gseState = (await getGseState()).data;
        parseState(gseState, dispatch);
        dispatch(setTimestamp(5));
    } catch (error) {
        // Handle errors (dispatch an error action or throw the error)
        throw error;
    }
});

export const setRocketSolenoid = createAsyncThunk("rocket/setRocketSolenoid", async ({solenoidName, solenoidState}, {dispatch}) => {
    try {
        await updateRocket(solenoidName, solenoidState);
    } catch (error) {
        // Handle errors (dispatch an error action or throw the error)
        throw error;
    }
});

export const rocketSlice = createSlice({
    name: "rocket",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        toggleSolenoid: (state, action) => {
            const solenoidName = action.payload;
            state.solenoids[solenoidName]["expected"] = !state.solenoids[solenoidName]["expected"];
            console.log("state updated");
        },
        setSolenoids: (state, action) => {
            for (let solenoidName in action.payload) {
                state.solenoids[solenoidName] = action.payload[solenoidName];
            }
        },
        setPts: (state, action) => {
            for (let ptName in action.payload) {
                state.pts[ptName] = action.payload[ptName];
            }
        },
        setTcs: (state, action) => {
            for (let tcName in action.payload) {
                state.tcs[tcName] = action.payload[tcName];
            }
        },
        setIgniters: (state, action) => {
            for (let igniterName in action.payload) {
                state.igniters[igniterName] = action.payload[igniterName];
            }
        },
        setTimestamp: (state, action) => {
            state.timestamp = action.payload;
        },
        setKeydown: (state, action) => {
            state.keydown = action.payload;
        },
        setMisc: (state, action) => {
            state.misc = action.payload;
        }
    }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     });
    // },
});

export const {toggleSolenoid, setSolenoids, setPts, setTcs, setIgniters, setTimestamp, setKeydown, setMisc} = rocketSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectSolenoids = (state) => state.rocket.solenoids;
export const selectPts = (state) => state.rocket.pts;
export const selectTcs = (state) => state.rocket.tcs;
export const selectIgniters = (state) => state.rocket.igniters;
export const selectMisc = (state) => state.rocket.misc;
export const selectTimestamp = (state) => state.rocket.timestamp;
export const selectKeydown = (state) => state.rocket.keydown;
export default rocketSlice.reducer;
