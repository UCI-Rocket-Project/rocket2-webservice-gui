import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import {getRocketState, updateRocket} from "../webservice";
const initialState = {
    solenoids: {}
};

export const fetchRocketState = createAsyncThunk("rocket/fetchRocketState", async (_, {dispatch}) => {
    try {
        const rocketState = (await getRocketState()).data;
        console.log("recv", rocketState);

        let solenoids = {};
        for (const key in rocketState) {
            if (key.includes("solenoid")) {
                solenoids[key] = rocketState[key];
            }
        }
        dispatch(setSolenoids(solenoids));
    } catch (error) {
        // Handle errors (dispatch an error action or throw the error)
        throw error;
    }
});

export const setRocketSolenoid = createAsyncThunk("rocket/setRocketSolenoid", async ({solenoidName, solenoidState}, {dispatch}) => {
    try {
        console.log("sending");
        const response = await updateRocket(solenoidName, solenoidState);
    } catch (error) {
        // Handle errors (dispatch an error action or throw the error)
        throw error;
    }
});

export const rocketSlice = createSlice({
    name: "rocket",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        toggleSolenoid: (state, action) => {
            const solenoidName = action.payload;
            state.solenoids[solenoidName] = !state.solenoids[solenoidName];
            console.log("state updated");
        },
        setSolenoids: (state, action) => {
            for (let solenoidName in action.payload) {
                state.solenoids[solenoidName] = action.payload[solenoidName];
            }
        }
    }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     });
    // },
});

export const {toggleSolenoid, setSolenoids} = rocketSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSolenoids = (state) => state.rocket.solenoids;

export default rocketSlice.reducer;
